---
import CaseStudyLayout from "../../layouts/CaseStudyLayout.astro";

const frontMatter = {
  title: "Future Work",
  description: "Plans for future additions to the Pendulum BaaS Platform",
  prevSection: "Architecture",
  prevPath: "/case-study/architecture/",
  nextSection: "Meet the Team",
  nextPath: "/team",
};
---

<CaseStudyLayout frontmatter={frontMatter}>
  <h1>Future Work</h1>

  <h2 id="multi-tenant">Multi-Tenant Architecture</h2>

  <p>
    Currently, our platform operates on a single-tenant model where each
    application is deployed to its own VPC and shares no resources with other
    deployments. This method keeps applications isolated and makes deployment
    and teardown easy. Despite the simplicity, this architecture is limited by
    the number of VPCs allowed per AWS account. Moving to a multi-tenant
    architecture would allow for multiple applications to be deployed to the
    same VPC while maintaining logical separation of their data and
    configurations.
  </p>

  <h2 id="file-storage">File Storage Integration</h2>

  <p>
    Pendulum focuses on real-time updates and standard database operations, but
    many applications require robust file storage capabilities for handling user
    uploads, media assets, and document management. Future development would
    include implementing a comprehensive file storage service that integrates
    with our existing database and authentication systems.
  </p>

  <h2 id="scalability-control">Greater Scalability Control</h2>

  <p>
    Our current auto-scaling mechanisms provide good general-purpose scaling
    behavior, but some developers may want more granular control over their
    infrastructure scaling patterns as their applications mature. Future
    enhancements would give users more direct control over compute and storage
    allocations for backend resources as well as the ability to specify scaling
    rules.
  </p>

  <h2 id="additional-cloud-providers">Additional Cloud Provider Support</h2>

  <p>
    While AWS has the broadest adoption among cloud providers, supporting
    multiple cloud platforms would give developers greater flexibility and
    eliminate vendor lock-in. Weâ€™d like to support automated cloud deployment to
    other popular cloud providers like GCP and Azure. A multi-cloud strategy
    would require abstracting our deployment automation and
    infrastructure-as-code templates to work across different cloud APIs and
    service offerings while maintaining feature consistency.
  </p>
</CaseStudyLayout>
